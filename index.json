
[{"content":" ","date":"2025-02-05","externalUrl":null,"permalink":"/blog/","section":"Blog","summary":"","title":"Blog","type":"blog"},{"content":"","date":"2025-02-05","externalUrl":null,"permalink":"/tags/iterm2/","section":"Tags","summary":"","title":"ITerm2","type":"tags"},{"content":" 1. 安装 iTerm2 # 从官网下载并安装 iTerm2，或使用 Homebrew 安装：\nbrew install --cask iterm2 2. 安装 oh my zsh # Mac 系统默认已经安装了 zsh，可以通过以下命令确认：\nzsh --version 安装 oh my zsh：\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; 3. 配置主题 # 3.1 安装 Powerlevel10k 主题 # git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k 修改 ~/.zshrc 文件中的主题配置：\nZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; 重新加载配置：\nsource ~/.zshrc 首次加载会进入主题配置向导，根据个人喜好进行配置即可。如需重新配置，可执行：\np10k configure 这里配置时注意，第一个选项是否安装字体可能会失败！！！可以先选择不安装\n3.2 安装字体 # 为了正确显示主题的特殊字符，需要安装 Nerd Font：\nbrew install --cask font-hack-nerd-font 在 iTerm2 中设置字体： Preferences → Profiles → Text → Font → 选择 Hack Nerd Font\n4. 安装插件 # 4.1 语法高亮插件 # git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 4.2 自动补全插件 # git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 4.3 autojump 安装 # brew install autojump 4.3 启用插件 # 编辑 ~/.zshrc 文件，找到 plugins 配置行：\nplugins=( git zsh-syntax-highlighting zsh-autosuggestions ) 重新加载配置：\nsource ~/.zshrc 5. iTerm2 常用配置 # 5.1 配置快捷键 # 设置热键显示终端： Preferences → Keys → Hotkey → Create a Dedicated Hotkey Window 热键终端配置推荐：\n配置分屏快捷键：\n垂直分屏：Command + D 水平分屏：Command + Shift + D 切换分屏：Command + Option + 方向键 5.2 配置配色方案 # 下载配色方案: git clone https://github.com/mbadolato/iTerm2-Color-Schemes.git 导入配色方案:\nPreferences → Profiles → Colors → Color Presets → Import\n推荐配色方案：Solarized Dark、Dracula、One Dark\n5.3 其他实用设置 # 设置透明度： Preferences → Profiles → Window → Transparency 设置模糊效果： Preferences → Profiles → Window → Blur 关闭提示音： Preferences → Profiles → Terminal → Notifications → Silence bell 关闭**Enable Mouse Reporting（鼠标报告)(这个会开启影响在vim中的复制)**Preferences → Profiles → Terminal →Enable Mouse Reporting 6. .zshrc 文件配置 # 编辑 ~/.zshrc 文件，添加常用命令别名，环境变量等配置（以下是推荐配置）：\n# === 常用别名配置 === # 文件操作 alias l.=\u0026#39;ls -d .*\u0026#39; alias ll=\u0026#39;ls -lA\u0026#39; alias l=\u0026#39;ls -F\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; # 防止误操作，移动文件时提示 alias cp=\u0026#39;cp -i\u0026#39; # 防止误操作，复制文件时提示 alias rm=\u0026#39;rm -i\u0026#39; # 防止误操作，删除文件时提示 # 目录导航 alias cl=\u0026#39;clear\u0026#39; alias ..=\u0026#39;cd ..\u0026#39; alias ...=\u0026#39;cd ../..\u0026#39; alias ~=\u0026#39;cd ~\u0026#39; alias -- -=\u0026#39;cd -\u0026#39; # 返回上一次的目录 # Git 相关 alias gs=\u0026#39;git status\u0026#39; alias ga=\u0026#39;git add\u0026#39; alias gc=\u0026#39;git commit -m\u0026#39; alias gp=\u0026#39;git push\u0026#39; alias gl=\u0026#39;git pull\u0026#39; # === 环境变量配置 === # 配置 PATH（使用 ~ 代替完整家目录路径） export PATH=\u0026#34;/usr/local/opt/mongodb-community@4.4/bin:$PATH\u0026#34; export PATH=\u0026#34;~/software/groovy-3.0.14/bin:$PATH\u0026#34; export PATH=\u0026#34;~/.nvm/versions/node/v19.8.1/bin:$PATH\u0026#34; export PATH=\u0026#34;/Applications/CMake.app/Contents/bin:$PATH\u0026#34; export PATH=\u0026#34;~/miniforge3/bin:$PATH\u0026#34; # Hugging Face 镜像 export HF_ENDPOINT=https://hf-mirror.com # === 按需加载功能 === # nvm 手动加载（提升终端启动速度） function load_nvm { export NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;$NVM_DIR/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/nvm.sh\u0026#34; [ -s \u0026#34;$NVM_DIR/bash_completion\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/bash_completion\u0026#34; } alias nvmload=\u0026#39;load_nvm\u0026#39; # conda 手动加载（提升终端启动速度） function load_conda { eval \u0026#34;$(~/miniforge3/bin/conda shell.bash hook)\u0026#34; } alias condaload=\u0026#39;load_conda\u0026#39; # === oh-my-zsh 配置 === # 插件配置（注意：conda 插件会自动加载 conda 环境，可能导致启动变慢） plugins=( git # Git 命令缩写 autojump # 快速目录跳转 mvn # Maven 命令补全 macos # macOS 特定命令 gradle # Gradle 命令补全 docker # Docker 命令补全 docker-compose # Docker Compose 命令补全 cp # cp 命令进度条 pip # pip 命令补全 node # Node.js 相关 zsh-autosuggestions # 命令自动补全 zsh-syntax-highlighting # 命令语法高亮 ) # Powerlevel10k 主题配置 if [[ -r \u0026#34;${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\u0026#34; ]]; then source \u0026#34;${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\u0026#34; fi ZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh # oh-my-zsh 核心加载 export ZSH=$HOME/.oh-my-zsh source $ZSH/oh-my-zsh.sh 7. 效果展示 # 8. 参考资料 # iTerm2 官网 Oh My Zsh 官网 Powerlevel10k Nerd Fonts zsh-syntax-highlighting zsh-autosuggestions 9. 常见问题解决 # 9.1 终端启动速度慢 # 使用按需加载：将 nvm、conda 等环境配置改为手动加载\n减少不必要的插件：只保留常用的 oh-my-zsh 插件\n使用 zprof 分析启动性能：\n# 在 .zshrc 文件最开始添加 zmodload zsh/zprof # 在 .zshrc 文件最后添加 zprof 9.2 字体显示异常 # 确保正确安装了 Nerd Font 在 iTerm2 中设置字体时选择带有 \u0026ldquo;Nerd Font\u0026rdquo; 后缀的字体 重启 iTerm2 使字体设置生效 9.3 复制粘贴问题 # 确保关闭了 Mouse Reporting 功能 使用 Command + C/V 进行复制粘贴 在 vim 中使用 visual 模式时，按住 Option 键进行选择复制 9.4 终端左侧有小三角 # 取消勾选 show mark indicators 9.5 iterm2 HotKey window 无法再任意界面弹出展示 # iterm2 热键无法再任意界面展示，比如在全屏chrome时，按快捷键会跳出chrome\nHotKey Window -\u0026gt; Advanced -\u0026gt; Configure HotKey Window -\u0026gt; Floating Window 勾选floating window 10. 其他 # vim 推荐配置 # 修改 .vimrc 文件\n\u0026#34; Configuration file for vim set modelines=0 \u0026#34; Normally we use vim-extensions. If you want true vi-compatibility \u0026#34; remove change the following statements set nocompatible \u0026#34; Use Vim defaults instead of 100% vi compatibility set backspace=2 \u0026#34; more powerful backspacing \u0026#34; Don\u0026#39;t write backup file if vim is being called by \u0026#34;crontab -e\u0026#34; au BufWrite /private/tmp/crontab.* set nowritebackup nobackup \u0026#34; Don\u0026#39;t write backup file if vim is being called by \u0026#34;chpass\u0026#34; au BufWrite /private/etc/pw.* set nowritebackup nobackup syntax on \u0026#34; 语法高亮 autocmd InsertLeave * se nocul autocmd InsertEnter * se cul \u0026#34; 用浅色高亮当前行 set tabstop=4 \u0026#34; Tab键的宽度 set softtabstop=4 set shiftwidth=4 \u0026#34; 统一缩进为4 \u0026#34; 鼠标定位光标 set mouse=a \u0026#34; set number \u0026#34; 显示行号 colorscheme pablo \u0026#34; 设置颜色主题 set ruler \u0026#34; 在编辑过程中，在右下角显示光标位置的状态行 set scrolloff=3 \u0026#34; 光标移动到buffer的顶部和底部时保持3行距离 \u0026#34; Plugin \u0026#39;ybian/smartim\u0026#39; git alias 配置推荐（展示更丰富的分支commit信息） # git config --global alias.last \u0026#39;log -1 HEAD\u0026#39; git config --global alias.logg \u0026#39;log --graph --decorate --oneline --simplify-by-decoration --all\u0026#39; git config --global alias.cfgls \u0026#39;config --lis\u0026#39; git config --global alias.lg \u0026#39;log --graph --decorate --oneline --all\u0026#39; git config --global alias.caa \u0026#39;commit -a --amend\u0026#39; git config --global alias.st \u0026#39;status\u0026#39; git config --global alias.l \u0026#34;log --color --graph --pretty=format:\u0026#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39; --abbrev-commit --decorate --all\u0026#34; ","date":"2025-02-05","externalUrl":null,"permalink":"/blog/config-terminal/","section":"Blog","summary":"使用 iTerm2、zsh 和 oh my zsh 打造美观实用的终端开发环境","title":"iTerm2 + oh my zsh 配置终端","type":"blog"},{"content":"","date":"2025-02-05","externalUrl":null,"permalink":"/tags/oh-my-zsh/","section":"Tags","summary":"","title":"Oh My Zsh","type":"tags"},{"content":"","date":"2025-02-05","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025-02-05","externalUrl":null,"permalink":"/tags/zsh/","section":"Tags","summary":"","title":"Zsh","type":"tags"},{"content":" 你好！这里是我的博客。\n我关心技术、个人成长和内容创作。\n如果你好奇我正在做的事情，或了解更多关于我的信息。\n","date":"2025-02-05","externalUrl":null,"permalink":"/","section":"王春盛","summary":"","title":"王春盛","type":"page"},{"content":"","date":"2024-02-21","externalUrl":null,"permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish","type":"tags"},{"content":"","date":"2024-02-21","externalUrl":null,"permalink":"/tags/github-pages/","section":"Tags","summary":"","title":"Github Pages","type":"tags"},{"content":"","date":"2024-02-21","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":" 1. 安装 Hugo # 这里使用包管理器安装 Hugo，我的操作系统是 Mac OS，所以使用 Homebrew 安装 Hugo。如果你使用的是 Windows 或 Linux，可以根据 Hugo 文档提示的方式安装： Hugo 文档：Install Hugo\nbrew install hugo 查看 Hugo 是否安装成功，显示 Hugo 版本号代表 Hugo 安装成功。\nhugo version 2. hugo创建网站 # # 创建网站 hugo new site blog # 进入bolg目录 cd blog # 初始化本地git仓库 git init # 添加主题git子模块 git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish # 创建并拷贝默认配置 mkdir -p config/_default \u0026amp;\u0026amp; cp themes/blowfish/config/_default/* ./config/_default # 配置主题 sed -i \u0026#34;\u0026#34; \u0026#39;s/# theme/theme/g\u0026#39; config/_default/config.toml # 创建.gitignore 并初始化 echo \u0026#34;.hugo_build.lock\\npublic/\\nresources/_gen/\\n.DS_Store\u0026#34; \u0026gt;\u0026gt; gitignore # 启动 hugo server 本地浏览器查看服务，打开网址\nhttp://localhost:1313\n至此本地博客的搭建就完成了\n3. 推送博客到github page # 3.1 github 创建仓库 # 创建两个仓库 blog 和 cswangs.github.io 注意cswangs改成自己的github用户名\n其中\nblog 仓库用来存储博客源码文件等\ncswangs.github.io 仓库用来存储打包好的网站文件\n3.2 推送 blog 到仓库 # # 在blog目录下执行如下命令 git add . git commit -m \u0026#34;blog init\u0026#34; git remote add origin https://github.com/cswangs/blog.git git branch -M master git push -u origin master 3.3 本地生成打包目录 # #在blog目录下执行该命令生成public文件夹 hugo 3.4 推送 public 到仓库 # cd public git init git remote add origin git@github.com:cswangs/cswangs.github.io.git git pull --rebase origin master git add . git commit -m \u0026#34;init blog\u0026#34; git push origin master 3.5 查看网页 # 注意 cswangs 换成自己的 github username\nhttps://cswangs.github.io/\n4. 基本配置和创作 # 4.1 基本配置 # 以上最基础的blog就搭建完毕了，可以根据自己的喜好进行自定义配置\n配置说明可查看 blowfish相关文档\n如果觉得太复杂，可以直接 copy 我的或者其他大佬的配置文件\n可以 copy 除了 public 和 themes 的所有文件夹\n然后再根据自己的偏好进行调整\n其中主要修改如下几个文件\nconfig/_default/languages.zh-cn.toml static 修改建议：\n图片可以使用https://favicon.io/\n在线生成定制化的icon 或者将自己的照片转换到响应格式\nhttps://www.reduceimages.com/ 也可以使用该网址，进行单张图片的格式调整\n4.2 创作 # 创作主要在 content文件夹中进行，可以直接在blog文件夹中进行复制修改\n也可以使用命令直接创建，用 Hugo 创建一篇文章的命令是:\nhugo new content/blog/first-blog/index.md 用这个命令创建的 Markdown 文件会套用 archetypes 文件夹中的 front matter 模版，在空白处用 Markdown 写入内容。\n4.3 发布 # #在blog目录下执行该命令更新public文件夹 hugo cd public git add . git commit -m \u0026#34;first blog\u0026#34; git push origin master ps: 在发布之前可以执行 hugo server 命令在本地进行验证\n5. 其他配置 # 5.1 评论 # 评论使用的是cusdis https://cusdis.com/\n修改 layouts/partials/comments.html 文件中的配置data-app-id 为自己的 data-app-id\n5.2 view\u0026amp;like # 浏览量和点赞使用的是 https://console.firebase.google.com/\n参考文档 https://blowfish.page/docs/firebase-views/\nCreate a web app\n获取firebase SDK 配置，并修改到config/_default/params.toml配置文件\nCreate a new database and choose to start in production mode.\n配置规则 rules_version = \u0026#39;2\u0026#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if request.auth != null; } } } 发布 允许匿名 6. Reference # 如何用 GitHub Pages + Hugo 搭建个人博客\nblowfish 主题\nhugo quick start\ncusdis 评论系统\ngoogle 浏览量和点赞\n7. 其他 # 克隆项目注意项 克隆blog项目时，需要将submodule也克隆，因为blowfish主题是git子模块\ngit clone --recurse-submodules \u0026lt;repository-url\u0026gt; git submodule update --remote ","date":"2024-02-21","externalUrl":null,"permalink":"/blog/how-blog/","section":"Blog","summary":"github page + hugo + blowfish主题 搭建博客方法","title":"Hugo+Github Pages 搭建个人博客","type":"blog"},{"content":"","date":"2024-02-21","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":"","date":"2023-12-31","externalUrl":null,"permalink":"/tags/content-creation/","section":"Tags","summary":"","title":"Content Creation","type":"tags"},{"content":"作为一个技术人，之前一直是有写博客的想法。\n2023年初定了个小目标，今年一定要开始写博客，最后一直拖到了现在。。。\n2023最后一天，赶紧把这个小目标完成，来不及解释了。。。\n具体为什么要写博客，可以看看 why blog\n","date":"2023-12-31","externalUrl":null,"permalink":"/blog/why-blog/","section":"Blog","summary":"抓紧时间","title":"为什么写博客？","type":"blog"},{"content":" Now 页面会随着时间和当下生活的优先级而更新，用来让别人看见这个人现在生活的重点是什么，和提醒自己专注于当下最重要的事。 正在做 # 努力工作 学习英语 健身 正在读 # 《Designing Data-Intensive Applications》 ","date":"2022-08-14","externalUrl":null,"permalink":"/now/","section":"王春盛","summary":"","title":"Now","type":"page"},{"content":" About Me # 大家好我是王春盛 我从 2023-12 开始写博客 目前是alibaba软件工程师 我非常想多认识一些开发工程师。 About Site # 本站生日：2023-12-31 使用 Hugo 搭建，部署在 GitHub Pages 上：如何用 GitHub Pages + Hugo 搭建个人博客 页面的灵感来自 Derek Sivers 博客中使用的评论工具是 Cusdis，不需要登陆任何账号即可评论。但也由于没有任何账号的缘故，我回复了你的评论后，你不会收到任何形式的提示，需要之后自己返回评论区查看。如果你需要一来一回有交流的信息，给我发邮件 可能是更好的选择，可以在本页面下方找到我的邮件地址。 Don\u0026rsquo;t be shy, let\u0026rsquo;s connect! # Twitter - 我的 jibber jabber 。 如果有任何问题，或者其他想要交流的信息，我会很高兴收到你的邮件：chris.cs.wang@gmail.com ","externalUrl":null,"permalink":"/about/","section":"王春盛","summary":"","title":"About","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":" ","externalUrl":null,"permalink":"/booknote/","section":"Book Note","summary":"","title":"Book Note","type":"booknote"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" ","externalUrl":null,"permalink":"/inspiration/","section":"Inspiration","summary":"","title":"Inspiration","type":"inspiration"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]